[config]
default_to_workspace = false
min_version = "0.35.13"
unstable_features = ["CTRL_C_HANDLING"]
skip_core_tasks = true

[config.modify_core_tasks]
private = true
namespace = "default"

#######  MAIN TASKS  #######

[tasks.default]
alias = "start"

# Browser-specific tasks with dev_server.log protection
# Protection includes: file locking, automatic log cleanup, signal handling
[tasks.start]
description = "Start in browser mode with auto-reload (with log protection)"
dependencies = ["install"]
script = '''
LOG_FILE="dev_server.log"
LOCK_FILE="dev_server.lock"

# Function to clean up on exit
cleanup() {
    echo "Cleaning up..."
    rm -f "$LOCK_FILE"
    exit 0
}

# Set up signal handlers
trap cleanup EXIT INT TERM

# Check if already running
if [ -f "$LOCK_FILE" ]; then
    echo "Development server appears to already be running (lock file exists)"
    echo "If you're sure it's not running, remove $LOCK_FILE and try again"
    exit 1
fi

# Create lock file
echo $$ > "$LOCK_FILE"

# Clean previous log
> "$LOG_FILE"

echo "Starting NovyWave development server with file locking..."
echo "Output will be logged to $LOG_FILE"
echo "Press Ctrl+C to stop"

# Start the server
mzoon/bin/mzoon start ${@} >> "$LOG_FILE" 2>&1 &
SERVER_PID=$!

# Wait for the server process
wait $SERVER_PID
'''

[tasks.open]
description = "Start in browser mode and open browser (with log protection)"
dependencies = ["install"]
env = { "MZOON_BROWSER_SYNC" = false }
script = '''
LOG_FILE="dev_server.log"
LOCK_FILE="dev_server.lock"

# Function to clean up on exit
cleanup() {
    echo "Cleaning up..."
    rm -f "$LOCK_FILE"
    exit 0
}

# Set up signal handlers
trap cleanup EXIT INT TERM

# Check if already running
if [ -f "$LOCK_FILE" ]; then
    echo "Development server appears to already be running (lock file exists)"
    echo "If you're sure it's not running, remove $LOCK_FILE and try again"
    exit 1
fi

# Create lock file
echo $$ > "$LOCK_FILE"

# Clean previous log
> "$LOG_FILE"

echo "Starting NovyWave development server with file locking..."
echo "Output will be logged to $LOG_FILE"
echo "Press Ctrl+C to stop"

# Start the server
mzoon/bin/mzoon start --open ${@} >> "$LOG_FILE" 2>&1 &
SERVER_PID=$!

# Wait for the server process
wait $SERVER_PID
'''

# Tauri-specific tasks
[tasks.tauri]
description = "Start in Tauri desktop mode"
dependencies = ["install", "install_tauri_cli"]
command = "cargo"
args = ["tauri", "dev"]
cwd = "src-tauri"

[tasks.tauri-build]
description = "Build Tauri desktop app"
dependencies = ["install", "install_tauri_cli", "build"]
command = "cargo"
args = ["tauri", "build"]
cwd = "src-tauri"

# Common tasks
[tasks.install]
description = "Install all dependencies. It's NoOp if all deps are already installed."
dependencies = [
    "install_wasm_target", 
    "install_mzoon",
]

[tasks.build]
description = "Build for browser mode (release)"
command = "mzoon/bin/mzoon"
args = ["build", "-r", "-f"]

[tasks.clean]
description = "Clean all build artifacts"
script = '''
mzoon/bin/mzoon clean
cd src-tauri && cargo clean
rm -rf frontend_dist
'''

######  HELPER TASKS  ######

[tasks.install_wasm_target]
description = "Install Rust target `wasm32-unknown-unknown`"
command = "rustup"
args = ["target", "add", "wasm32-unknown-unknown"]

[tasks.install_mzoon]
description = "Install MoonZoon CLI (mzoon) locally"
command = "cargo"
args = [
    "install", 
    "mzoon", 
    "--git", 
    "https://github.com/MoonZoon/MoonZoon",
    "--locked",
    "--rev",
    "7c5178d891cf4afbc2bbbe864ca63588b6c10f2a",
    "--root",
    "mzoon",
]

[tasks.install_tauri_cli]
description = "Install Tauri CLI"
command = "cargo"
args = ["install", "tauri-cli@^2.0.3"]
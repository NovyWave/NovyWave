[config]
default_to_workspace = false
min_version = "0.35.13"
unstable_features = ["CTRL_C_HANDLING"]
skip_core_tasks = true

[config.modify_core_tasks]
private = true
namespace = "default"

#######  MAIN TASKS  #######

[tasks.default]
alias = "start"

[tasks.start]
description = "Start in browser mode with auto-reload"
alias = "start-web"

[tasks.start-web]
description = "Start in web mode (MoonZoon SSE)"
dependencies = ["install"]
env = { NOVYWAVE_PLATFORM = "WEB" }
script = '''
> dev_server.log
./mzoon/bin/mzoon start ${@} >> dev_server.log 2>&1
'''

[tasks.open]
description = "Start in browser mode and open browser"
dependencies = ["install"]
script = '''
> dev_server.log
./mzoon/bin/mzoon start --open ${@} >> dev_server.log 2>&1
'''

[tasks.kill]
description = "Stop all development processes"
script = '''
PORT=$(grep "^port = " MoonZoon.toml | head -1 | cut -d' ' -f3 || echo "8080")
KILLED_ANY=false

echo "Stopping development processes on port $PORT..."

# Kill process on configured port
PID=$(lsof -ti:$PORT 2>/dev/null || true)
if [ -n "$PID" ]; then
    if kill -TERM $PID 2>/dev/null; then
        echo "Sent TERM signal to process on port $PORT"
        KILLED_ANY=true
    fi
fi

# Kill makers processes
if pkill -TERM -f "makers start" 2>/dev/null; then
    echo "Sent TERM signal to makers process"
    KILLED_ANY=true
fi

# Kill mzoon processes  
if pkill -TERM -f "mzoon" 2>/dev/null; then
    echo "Sent TERM signal to mzoon process"
    KILLED_ANY=true
fi

# Kill Tauri processes
if pkill -TERM -f "cargo tauri" 2>/dev/null; then
    echo "Sent TERM signal to Tauri process"
    KILLED_ANY=true
fi

if [ "$KILLED_ANY" = "true" ]; then
    echo "Waiting 2 seconds for graceful shutdown..."
    sleep 2
    
    # Force kill if still running
    PID=$(lsof -ti:$PORT 2>/dev/null || true)
    if [ -n "$PID" ]; then
        if kill -KILL $PID 2>/dev/null; then
            echo "Force killed process on port $PORT"
        fi
    fi
    
    pkill -KILL -f "makers start" 2>/dev/null && echo "Force killed makers process" || true
    pkill -KILL -f "mzoon" 2>/dev/null && echo "Force killed mzoon process" || true
    pkill -KILL -f "cargo tauri" 2>/dev/null && echo "Force killed Tauri process" || true
    
    echo "✓ Development processes terminated"
else
    echo "No development processes found to kill"
fi

> dev_server.log
> dev_tauri.log
'''

# Tauri-specific tasks
[tasks.tauri]
description = "Start in Tauri desktop mode using running dev server"
alias = "start-tauri"

[tasks.start-tauri]
description = "Start in Tauri mode using running dev server"
dependencies = ["install", "install_tauri_cli"]
env = { NOVYWAVE_PLATFORM = "TAURI" }
script = '''
echo "Starting Tauri desktop mode using dev server at http://localhost:8080..."

# Check if dev server is running on port 8080
if ! curl -s http://localhost:8080 >/dev/null 2>&1; then
    echo "ERROR: Dev server is not running on port 8080"
    echo "Please start the dev server first with: makers start"
    exit 1
fi

echo "✓ Dev server detected on port 8080"
echo "✓ Starting Tauri with shared dev server..."
echo "✓ Tauri logs will be written to dev_tauri.log"

> dev_tauri.log
cd src-tauri && cargo tauri dev --config tauri.dev.conf.json >> ../dev_tauri.log 2>&1
'''

[tasks.tauri-build]
description = "Build Tauri desktop app with embedded backend"
dependencies = ["install", "install_tauri_cli", "build"]
script_runner = "@duckscript"
script = '''
echo "Building Tauri desktop app..."

# Check if frontend_dist exists
if path_exists frontend_dist
    echo "Frontend assets found in frontend_dist/"
else
    echo "Warning: frontend_dist directory not found"
end

# Build Tauri app
cd src-tauri
exec cargo tauri build
'''

[tasks.tauri-dev-standalone]
description = "Start Tauri with external backend (for debugging)"
dependencies = ["install", "install_tauri_cli"]
script = '''
echo "Starting Tauri in standalone mode (requires separate backend)"
echo "Start backend separately with: makers start"
cd src-tauri && cargo tauri dev --no-dev-server
'''

# Common tasks
[tasks.install]
description = "Install all dependencies. It's NoOp if all deps are already installed."
dependencies = [
    "install_wasm_target", 
    "install_mzoon",
]

[tasks.build]
description = "Build for browser mode (release)"
env = { NOVYWAVE_PLATFORM = "WEB" }
command = "mzoon/bin/mzoon"
args = ["build", "-r", "-f"]

[tasks.build-web]
description = "Build for web mode (MoonZoon)"
env = { NOVYWAVE_PLATFORM = "WEB" }
command = "mzoon/bin/mzoon" 
args = ["build", "-r", "-f"]

[tasks.build-tauri]
description = "Build frontend for Tauri mode"
env = { NOVYWAVE_PLATFORM = "TAURI" }
command = "mzoon/bin/mzoon"
args = ["build", "-r", "-f"]

[tasks.build_for_tauri]
description = "Build frontend for Tauri (run from src-tauri directory)"
dependencies = ["install"]
script = '''
CURRENT_DIR=$(pwd)
if [[ "$CURRENT_DIR" == *"src-tauri"* ]]; then
    cd ..
fi
./mzoon/bin/mzoon build -r -f
'''

[tasks.clean]
description = "Clean all build artifacts"
script = '''
./mzoon/bin/mzoon clean
cd src-tauri && cargo clean
rm -rf frontend_dist
rm -rf plugins/dist
'''

######  HELPER TASKS  ######

[tasks.install_wasm_target]
description = "Install Rust target `wasm32-unknown-unknown`"
command = "rustup"
args = ["target", "add", "wasm32-unknown-unknown"]

[tasks.install_mzoon]
description = "Install MoonZoon CLI (mzoon) locally"
command = "cargo"
args = [
    "install", 
    "mzoon", 
    "--git", 
    "https://github.com/MoonZoon/MoonZoon",
    "--locked",
    "--rev",
    "7c5178d891cf4afbc2bbbe864ca63588b6c10f2a",
    "--root",
    "mzoon",
]

[tasks.build_plugins]
description = "Build all plugin components and copy artifacts to plugins/dist"
script_runner = "bash"
script = [
    "set -eu",
    "DIST_DIR=plugins/dist",
    "mkdir -p \"${DIST_DIR}\"",
    "mapfile -t targets < <(find plugins -maxdepth 2 -name Cargo.toml)",
    "if [ ${#targets[@]} -eq 0 ]; then echo 'No plugin manifests found under plugins/'; exit 0; fi",
    "for manifest in \"${targets[@]}\"; do echo \"Building component for ${manifest}\"; cargo component build --release --manifest-path \"${manifest}\"; done",
    "rm -f \"${DIST_DIR}\"/*.wasm",
    "find target/wasm32-wasip1/release -maxdepth 1 -name '*.wasm' -print -exec cp {} \"${DIST_DIR}/\" \\;",
    "echo \"Plugin components copied to ${DIST_DIR}/\""
]

[tasks.watch_plugins]
description = "Watch plugin sources and rebuild components"
script_runner = "bash"
script = [
    "set -eu",
    "> dev_plugins.log",
    "echo '[watch_plugins] watching plugins/**' >> dev_plugins.log",
    "cargo watch -w plugins -i 'plugins/dist/**' -s 'makers build_plugins' >> dev_plugins.log 2>&1"
]

[tasks.install_tauri_cli]
description = "Install Tauri CLI"
command = "cargo"
args = ["install", "tauri-cli@^2.0.3"]

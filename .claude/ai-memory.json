{"type":"entity","name":"current_session_state","entityType":"productivity","observations":["Working on light theme compatibility and theme storage fixes","Fixed PreCompact hook to prevent Memory MCP corruption by storing large data to separate log files instead","Memory MCP successfully debugged and reconstructed with comprehensive knowledge entities","PreCompact hook fixed with 2KB limits instead of 200 char truncation","All important patterns and solutions properly restored to knowledge entities","Ready to redesign PreCompact hook with proper separation of concerns and reasonable data limits","PreCompact hook redesigned with proper data separation - small observations in logs, comprehensive backups in timestamped directories"]}
{"type":"entity","name":"recent_solutions","entityType":"productivity","observations":["Fixed theme storage by replacing hardcoded 'dark' in config.rs with current_theme()","Solved signal type conflicts using map_bool_signal pattern from CryptoKick","Migrated 40+ hardcoded colors to NovyUI design tokens for light theme compatibility","Successfully debugged Memory MCP corruption caused by PreCompact hook storing massive 56KB observations in NDJSON file","Fixed PreCompact hook corruption by preventing direct ai-memory.json writes and using separate survival logs instead","Fixed PostCompact hook working directory issue - hook works correctly when called with absolute path, init_hook_env() properly detects project root","Fixed Claude Code hook path resolution by converting relative paths to absolute paths in .claude/settings.json - prevents 'No such file or directory' errors when CLI runs from different working directories","Reverted to portable relative paths in .claude/settings.json for contributor compatibility - hooks use init_hook_env() to auto-detect project root and fix working directory","Implemented lock file approach for preventing PostCompact hook duplicates - uses .claude/last-recovery.lock with Unix timestamps for clean, reliable duplicate prevention"]}
{"type":"entity","name":"active_blockers","entityType":"productivity","observations":[]}
{"type":"entity","name":"daily_patterns","entityType":"productivity","observations":["Use map_bool_signal for different signal types, map_bool for simple values","Always use NovyUI design tokens instead of hardcoded colors","Use IconName enum tokens, never strings for icons","Use zoon::println!() for WASM logging, never std::println!()"]}
{"type":"entity","name":"next_steps","entityType":"productivity","observations":["Light theme implementation complete and working beautifully","App ready for continued waveform viewer feature development"]}
{"type":"entity","name":"NovyWave project","entityType":"project","observations":["Professional waveform viewer for digital design verification","Rust+WASM frontend with MoonZoon framework","Dual platform: browser and Tauri desktop","Theme system with light/dark modes working perfectly","Uses shared crate for type definitions between frontend/backend"]}
{"type":"entity","name":"Martin Kavik","entityType":"developer","observations":["Project maintainer and lead developer","Prefers concise responses without unnecessary explanations","Uses git checkpoint workflow for rapid iteration","Emphasizes proper Memory MCP usage for session continuity","Values clean architecture and following established patterns","Prefers multi-line commit messages over single-line for complex changes","Values subagent delegation for context conservation","Emphasizes no unnecessary server restarts during development"]}
{"type":"entity","name":"MoonZoon framework","entityType":"framework","observations":["Rust full-stack framework with Zoon UI library","Frontend compiles to WASM for browser execution","Uses makers start for development server","Never restart dev server without explicit permission","Auto-reload only works after successful compilation"]}
{"type":"entity","name":"NovyUI component library","entityType":"library","observations":["Custom UI component library built on Zoon","Uses IconName enum tokens instead of string literals","Design token system with reactive theme signals","Components include Button, Input, TreeView, Card, List","All colors use neutral_* and primary_* token functions"]}
{"type":"entity","name":"comprehensive_solutions","entityType":"knowledge","observations":["Theme storage: Replace hardcoded 'dark' string in config.rs save_current_config() with current_theme() function","Signal type unification: Use map_bool_signal for different signal types (from CryptoKick pattern), map_bool for simple values","Light theme migration: Convert all hardcoded HSLUV/OKLCH colors to NovyUI design tokens (neutral_1-12, primary_6-7)","Memory MCP corruption: Caused by PreCompact hook storing 56KB observations - use separate log files for large data","WASM compilation: Never use cargo build/check - only mzoon handles WASM properly, monitor via dev_server.log","Icon consistency: All components must use IconName enum tokens, never string literals for type safety"]}
{"type":"entity","name":"comprehensive_development_patterns","entityType":"knowledge","observations":["Height inheritance: Root with Height::screen(), all containers with Height::fill() - missing breaks chain","Responsive layouts: Always use Width::fill() for responsive design, avoid fixed widths","WASM logging: Use zoon::println!() for console output, std::println!() does nothing in browser","Signal composition: map_bool_signal unifies different signal types, map_bool for simple values","Design tokens: All colors use reactive signals neutral_*() and primary_*() functions for theme switching","Development server: Never restart without permission - takes minutes to compile backend/shared crates","Config gates: Use CONFIG_LOADED.get() to prevent startup overwrites during session restoration","Git workflow: Two-stage checkpoint+commit pattern for rapid iteration and clean history","Subagent delegation: Use Task tool extensively for research and multi-file operations to preserve main session context","Signal chains: Use deterministic signal chains instead of Timer::sleep workarounds for reliable async behavior"]}
{"type":"entity","name":"moonzoon_novyui_patterns","entityType":"knowledge","observations":["Button API: button().label().variant().size().left_icon(IconName::*).on_press().build()","Input API: input().placeholder().left_icon().size().on_change().build()","Panel creation: create_panel(header_element, content_element) with consistent styling","TreeView: Uses external_expanded and external_selected for state management","Icon registry: IconName enum with to_kebab_case() mapping and SVG file associations","Theme system: init_theme() with custom persistence callback for config integration","Layout patterns: Row/Column with Gap, Align, Padding - Stack for absolute positioning","Virtual lists: Fixed height with scroll virtualization for performance with large datasets"]}
{"type":"entity","name":"novywave_architecture","entityType":"knowledge","observations":["Dual platform: Browser via MoonZoon + Desktop via Tauri wrapper sharing same frontend","Shared crate: Common types between frontend/backend - LoadingFile, WaveformFile, Signal, UpMsg/DownMsg","Config system: .novywave TOML file with theme, files, workspace layout persistence","State management: Global signals for IS_DOCKED_TO_BOTTOM, FILES_PANEL_WIDTH, LOADED_FILES, etc","File loading: Backend processes .vcd/.fst files, sends parsed hierarchy to frontend","Panel layout: Resizable splitters with mouse drag, dock-to-bottom vs dock-to-right modes","Theme integration: NovyUI design tokens with MoonZoon theme system and config persistence","Development setup: makers start for dev server, auto-reload on successful compilation only","Virtual list optimization: Uses performance-optimized virtual scrolling for large variable datasets","Auto-save config gates: CONFIG_LOADED prevents startup overwrites during session restoration","Environment: Node v22.16.0, Rust 1.88.0, MZoon 0.1.0 for development stack"]}
{"type":"relation","from":"Martin Kavik","to":"NovyWave project","relationType":"maintains"}
{"type":"relation","from":"NovyWave project","to":"MoonZoon framework","relationType":"uses"}
{"type":"relation","from":"NovyWave project","to":"NovyUI component library","relationType":"depends_on"}
{"type":"relation","from":"NovyUI component library","to":"MoonZoon framework","relationType":"built_on"}
{"type":"relation","from":"Martin Kavik","to":"comprehensive_development_patterns","relationType":"follows"}
{"type":"relation","from":"NovyWave project","to":"comprehensive_solutions","relationType":"benefits_from"}
{"type":"relation","from":"comprehensive_development_patterns","to":"moonzoon_novyui_patterns","relationType":"implements"}
{"type":"relation","from":"novywave_architecture","to":"NovyWave project","relationType":"defines"}
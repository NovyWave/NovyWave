// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_init_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::init();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_greet_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::greet();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_shutdown_cabi<T: Guest>() {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    T::shutdown();
}
pub trait Guest {
    fn init() -> ();
    fn greet() -> ();
    fn shutdown() -> ();
}
#[doc(hidden)]
macro_rules! __export_world_runtime_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "init")] unsafe extern "C" fn
        export_init() { unsafe { $($path_to_types)*:: _export_init_cabi::<$ty > () } }
        #[unsafe (export_name = "greet")] unsafe extern "C" fn export_greet() { unsafe {
        $($path_to_types)*:: _export_greet_cabi::<$ty > () } } #[unsafe (export_name =
        "shutdown")] unsafe extern "C" fn export_shutdown() { unsafe {
        $($path_to_types)*:: _export_shutdown_cabi::<$ty > () } } };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_runtime_cabi;
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_runtime_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_runtime_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_runtime_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:novywave:plugins:runtime:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 197] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07H\x01A\x02\x01A\x04\x01\
@\0\x01\0\x04\0\x04init\x01\0\x04\0\x05greet\x01\0\x04\0\x08shutdown\x01\0\x04\0\
\x18novywave:plugins/runtime\x04\0\x0b\x0d\x01\0\x07runtime\x03\0\0\0G\x09produc\
ers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060\
.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
